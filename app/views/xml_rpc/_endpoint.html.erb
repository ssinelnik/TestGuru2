<div class="xml-rpc-container">
  <h1>XML-RPC API Testing Interface</h1>

  <%= form_with url: xmlrpc_path, method: :post, local: false, id: 'xmlrpc-form' do |f| %>
    <div class="form-group">
      <%= f.label :method_name, "Method Name" %>
      <%= f.select :method_name,
          options_for_select(['test.add', 'user.get'], selected: 'test.add'),
          {}, class: 'form-control', id: 'method-selector' %>
    </div>

    <div id="params-container">
      <!-- Динамические поля параметров -->
      <div class="param-group" data-method="test.add">
        <%= label_tag :param1, "Parameter 1 (Integer)" %>
        <%= number_field_tag :param1, 0, class: 'form-control' %>

        <%= label_tag :param2, "Parameter 2 (Integer)" %>
        <%= number_field_tag :param2, 0, class: 'form-control' %>
      </div>

      <div class="param-group" data-method="user.get" style="display:none;">
        <%= label_tag :user_id, "User ID" %>
        <%= number_field_tag :user_id, 1, class: 'form-control' %>
      </div>
    </div>

    <%= f.submit "Send XML-RPC Request", class: 'btn btn-primary mt-3',
                 data: { disable_with: "Sending..." } %>
  <% end %>

  <div id="response" class="mt-4">
    <h3>Response:</h3>
    <pre class="bg-light p-3 rounded" id="response-content"></pre>
  </div>

  <div class="examples mt-5">
    <h4>Примеры запросов cURL:</h4>
    <code>
      test.add: curl -X POST http://localhost:3000/xmlrpc -H "Content-Type: text/xml" -d '&lt;?xml version="1.0"?&gt;&lt;methodCall&gt;&lt;methodName&gt;test.add&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;int&gt;17&lt;/int&gt;&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;&lt;int&gt;25&lt;/int&gt;&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;'
    </code>
    <br><br>
    <code>
      user.get: curl -X POST http://localhost:3000/xmlrpc -H "Content-Type: text/xml" -d '&lt;?xml version="1.0"?&gt;&lt;methodCall&gt;&lt;methodName&gt;user.get&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;int&gt;1&lt;/int&gt;&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;'
    </code>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const methodSelector = document.getElementById('method-selector');
  const paramsContainer = document.getElementById('params-container');

  function updateParamsVisibility() {
    const selectedMethod = methodSelector.value;
    document.querySelectorAll('.param-group').forEach(group => {
      group.style.display = group.dataset.method === selectedMethod ? 'block' : 'none';
    });
  }

  methodSelector.addEventListener('change', updateParamsVisibility);
  updateParamsVisibility();

  document.getElementById('xmlrpc-form').addEventListener('submit', async function(e) {
    e.preventDefault();

    const method = methodSelector.value;
    const params = Array.from(document.querySelectorAll('.param-group:visible input'))
                     .map(input => parseInt(input.value));

    const xmlBody = `<?xml version="1.0"?>
      <methodCall>
        <methodName>${method}</methodName>
        <params>
          ${params.map(p => `<param><value><int>${p}</int></value></param>`).join('')}
        </params>
      </methodCall>`;

    try {
      const response = await fetch(this.action, {
        method: 'POST',
        headers: {
          'Content-Type': 'text/xml',
          'Accept': 'text/xml'
        },
        body: xmlBody
      });

      const responseText = await response.text();
      document.getElementById('response-content').textContent =
        new XMLSerializer().serializeToString(
          new DOMParser().parseFromString(responseText, "text/xml")
        );
    } catch (error) {
      document.getElementById('response-content').textContent =
        `Error: ${error.message}`;
    }
  });
});
</script>

<style>
.xml-rpc-container {
  max-width: 800px;
  margin: 2rem auto;
  padding: 20px;
}

.param-group {
  margin: 15px 0;
  padding: 15px;
  border: 1px solid #dee2e6;
  border-radius: 4px;
}

pre {
  white-space: pre-wrap;
  word-wrap: break-word;
}
</style>
